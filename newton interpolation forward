Algorithm:
1. Define variable
2. Read the no fo data n.
3. Read the data x and y as
for i=0 to n
   Read ax[i] and ay[i]
   end for i
4. Calcualte h=ax[1]-ax[0]
5. Calculate 1st order differences as
   for i=0 to n-1
       diff[i][1]=ay[i+1]-ay[i]
       end for i
 6. Calculte 2nnd and higher order differnce as
 for j=2 to higher order 
  for i=0 to n-j
     diff[i][j]=diff[i+1][j-1] - diff[i][j-1]
     end for i
     end for j
 7. Calculate p=(x-ax[i]/h)
              yp=ay[i]
 8. calculate interpolation valuse as
          for k=1 to orders 
          nu*=p-k-1
          de*=k
          yp+=(nu/de)*diff[i][k]
     print yp as interpolated value.
     
     ///
     #include<stdio.h>
#include<stdio.h>
void main()
{
    int ax[10]={3,4,5,6,7,8,9},x=2;
    float ay[10]={4.8,8.4,14.5,23.6,36.2,52.8,73.9},p;
    float yp;
    float diff[10][20];
    int n=7,i,j,h,k;
    h=ax[1]-ax[0];
    for(i=0;i<n ;i++)
    {
        diff[i][1]=ay[i+1]-ay[i];
    }
    for(j=2;j<n;j++)
    {
        for(i=0;i<(n-j);i++)
        {
            diff[i][j]=diff[i+1][j-1]-diff[i][j-1];
            //printf("%d\t",diff[i][j]);
        }
    }
    p=(x-ax[0]/h);
    yp=ay[0];
    for(k=1;k<n;k++)
    {
        
    }

/*
int x=6;
for(i=0;i<n;i++)
    {

for(j=1;j<=x;j++)
{
    printf("%.2f\t",diff[i][j]);
}
printf("\n");

x=x-1;
}
*/
}
///
